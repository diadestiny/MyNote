package com.example.day06;

import android.os.Handler;
import android.support.v4.view.ViewPager;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.view.View;
import android.widget.LinearLayout;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

public class MainActivity extends AppCompatActivity implements MyViewPager.OnViewPagerTouvhListener, ViewPager.OnPageChangeListener {

    private MyViewPager mloopPager;
    private LooperPagerAdaper mlooperPagerAdaper;
    private static List<Integer> spis =new ArrayList<>();


    static {
     spis.add(R.mipmap.pic1);
     spis.add(R.mipmap.pic2);
     spis.add(R.mipmap.pic3);
    }

    private Handler mHandler;
    private boolean mIsTouch = false;
    private LinearLayout mPointContainer;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        initView();
        mHandler = new Handler();

    }

    @Override
    public void onAttachedToWindow() {
        super.onAttachedToWindow();
        //当我这个界面绑定到窗口的时候
        mHandler.post(mLooperTask);
    }

    @Override
    public void onDetachedFromWindow() {
        super.onDetachedFromWindow();
        mHandler.removeCallbacks(mLooperTask);
    }


    private Runnable mLooperTask = new Runnable() {
        @Override
        public void run() {
            //切换viewPager里的图片到下一个
            if(!mIsTouch){
                //切换viewPager里的图片到下一个
                int currentItem = mloopPager.getCurrentItem();
                mloopPager.setCurrentItem(++currentItem,true);
            }
            mHandler.postDelayed(this,1000);

        }
    };

    private void initView() {
        //第一步,找到这个viewPager控件
        mloopPager = (MyViewPager)this.findViewById(R.id.looper_paper);
        //设置适配器
        mlooperPagerAdaper = new LooperPagerAdaper();
        mlooperPagerAdaper.setData(spis);
        mloopPager.setAdapter(mlooperPagerAdaper);
        mloopPager.addOnPageChangeListener(this);

        mloopPager.setOnViewPagerTouvhListener(this);
        mPointContainer = this.findViewById(R.id.points_container);
        //根据图片的个数,去添加点的个数
        insertPoint();
        mloopPager.setCurrentItem(100*mlooperPagerAdaper.getDataRealSize(),false);

    }

    private void insertPoint() {
        for(int i=0;i<spis.size();i++){
            View point = new View(this);
            LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(40,40);
            point.setBackground(getResources().getDrawable(R.drawable.shape_point_normal));
            layoutParams.leftMargin = 20;
            point.setLayoutParams(layoutParams);
            mPointContainer.addView(point);
        }
    }

    @Override
    public void onPagerTouch(boolean isTounch) {
        this.mIsTouch =isTounch;
    }

    @Override
    public void onPageScrolled(int i, float v, int i1) {

    }

    @Override
    public void onPageSelected(int i) {
        //这个方法的调用其实是viewPager停下来选中的位置
        int realPosition;
        if(mlooperPagerAdaper.getDataRealSize()!=0){
            
            realPosition = i% mlooperPagerAdaper.getDataRealSize();
        }
        else{
            realPosition=0;
        }
        setSelectPoint(realPosition);

    }

    private void setSelectPoint(int realPosition) {
        for(int i=0;i<mPointContainer.getChildCount();i++){
        View point = mPointContainer.getChildAt(i);
        if(i!=realPosition){
            //那就是白色
            point.setBackgroundResource(R.drawable.shape_point_normal);
        }
        else{
            //选中的颜色
            point.setBackgroundResource(R.drawable.shape_point_selected);
        }
        }
    }

    @Override
    public void onPageScrollStateChanged(int i) {

    }
}

